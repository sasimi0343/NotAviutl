@[Effect] AlphaContrast
--track0:Contrast,-255,255,0,0.1
--track1:Threshold,0,255,0,1
--check0:Max

require("rikky_module")

local secondrange = (255 - obj.track1) / 2
local secondthre = obj.track1 + secondrange

local pfunction = function(objr, objg, objb, obja, argr, argg, argb, arga, x, y)
	local r, g, b, a = objr, objg, objb, obja
	if (not obj.check0) then
		if (a > obj.track1) then
			if (a > secondthre) then
				local ano = (a - secondthre) / secondrange
				local nor = math.pow(ano, obj.track0)
				if (obj.track0 < 0) then
					nor = 1-math.pow(ano, -obj.track0)
				end
				a = nor * secondrange + secondthre
			else
				local ano = (a - obj.track1) / secondrange
				local nor = math.pow((1-ano), obj.track0)
				if (obj.track0 < 0) then
					nor = 1-math.pow((1-ano), -obj.track0)
				end
				a = nor * secondrange + obj.track1
			end
		else
			
		end
	else
		if (a > obj.track1) then
			a = 255
		else
			a = 0
		end
	end
	return r, g, b, a
end

rikky_module.pixelfunction(pfunction)

@[Effect] BorderClip
--track0:Size,0,9999,3,1
--track1:Blur,0,9999,0,1
--dialog:Color/col,color=0xffffff;
--check0:Reversed

require("rikky_module")

local ox,oy,oz,rx,ry,rz,zoom,alpha,aspect = obj.ox, obj.oy, obj.oz, obj.rx, obj.ry, obj.rz, obj.zoom, obj.alpha, obj.aspect

if (obj.check0) then
	rikky_module.image("w", "na_effect_bc1")
	
	obj.effect("反転", "透明度反転", 1 )
	obj.setoption("antialias", 0)
	rikky_module.image("w", "na_effect_bc2")
	
	obj.setoption("drawtarget", "tempbuffer", obj.w, obj.h)
	rikky_module.image("r", "na_effect_bc1")
	obj.setoption("antialias", 0)
	obj.draw()
	
	rikky_module.image("r", "na_effect_bc2")
	obj.effect("縁取り", "サイズ", obj.track0, "ぼかし", obj.track1)
	obj.setoption("blend", "alpha_sub")
	obj.setoption("antialias", 0)
	obj.draw()
	
	obj.setoption("blend", 0)
	obj.setoption("drawtarget", "framebuffer")
	obj.setoption("antialias", 1)
	obj.load("tempbuffer")
else
	obj.setoption("antialias", 0)
	rikky_module.image("w", "na_effect_bc1")
	obj.effect("縁取り", "サイズ", obj.track0, "ぼかし", obj.track1, "color", color)
	
	obj.setoption("drawtarget", "tempbuffer", obj.w, obj.h)
	obj.setoption("antialias", 0)
	obj.draw()
	
	rikky_module.image("r", "na_effect_bc1")
	obj.setoption("blend", "alpha_sub")
	obj.setoption("antialias", 0)
	obj.draw()
	
	obj.setoption("blend", 0)
	obj.setoption("drawtarget", "framebuffer")
	obj.setoption("antialias", 1)
	obj.load("tempbuffer")
end

obj.ox, obj.oy, obj.oz, obj.rx, obj.ry, obj.rz, obj.zoom, obj.alpha, obj.aspect = ox,oy,oz,rx,ry,rz,zoom,alpha,aspect

@[Effect] Segmented
--track0:Amount,1,99,1,1
--track1:CalcMode,0,1,0,1
--track2:Direction,0,1,0,1
--dialog:Position,pos={};

if (rikky_module == nil) then require("rikky_module") end

local oox,ooy,ooz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz = obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz

local iw = obj.w
local ih = obj.h
local id = obj.w

local sw = obj.w
local sh = obj.h
local sd = obj.w
local sd_op = obj.h
if (obj.track2 == 0) then
	id = obj.w
	sw = obj.w / (obj.track0+1)
	sd = sw
	sd_op = sh
else
	id = obj.h
	sh = obj.h / (obj.track0+1)
	sd = sh
	sd_op = sw
end

--print(sd_op .. ", " .. ih)

local direction = "左"
local direction_axis = "X"
local direction_op = "右"
local direction_axis_op = "Y"

if (obj.track2 == 0) then
	direction = "左"
	direction_axis = "X"
	direction_op = "右"
	direction_axis_op = "Y"
else
	direction = "上"
	direction_axis = "Y"
	direction_op = "下"
	direction_axis_op = "X"
end

rikky_module.image("w", "na_effect_sg1")
obj.setoption("drawtarget", "tempbuffer", iw, ih)

local currentL = 0
for i=0,(obj.track0-1) do
	rikky_module.image("r", "na_effect_sg1")
	
	obj.effect("クリッピング", direction, i*sd, direction_op, (obj.track0-i)*sd)
	
	local position = pos[i+1]
	if (position == nil) then position = 0.5 else position = pos[i+1]/100 end
	
	obj.effect("リサイズ", direction_axis, math.ceil(position * (id-currentL)), direction_axis_op, sd_op, "ドット数でサイズ指定", 1)
	--print(sd_op .. ", " .. obj.h)
	local ox = 0
	local oy = 0
	
	if (obj.track2 == 0) then
		ox = currentL + math.ceil(obj.w / 2) - (id / 2)
	else
		oy = currentL + math.ceil(obj.h / 2) - (id / 2)
	end
	
	currentL = currentL + (position * (id-currentL))
	
	if (obj.track2 == 0) then
		if (not (ox == math.floor(ox))) then
			obj.effect("領域拡張", "右", 1, "左", 1, "塗りつぶし", 1)
		end
	else
		if (not (oy == math.floor(oy))) then
			obj.effect("領域拡張", "上", 1, "下", 1, "塗りつぶし", 1)
		end
	end
	
	obj.draw(ox, oy)
end

	rikky_module.image("r", "na_effect_sg1")
	obj.effect("クリッピング", direction, obj.track0*sd)
	local position = (id - currentL)/100
	obj.effect("リサイズ", direction_axis, math.ceil(id-currentL), direction_axis_op, sd_op, "ドット数でサイズ指定", 1)
	local ox = 0
	local oy = 0
	
	if (obj.track2 == 0) then
		ox = currentL + math.ceil(obj.w / 2) - (id / 2)
	else
		oy = currentL + math.ceil(obj.h / 2) - (id / 2)
	end
	
	currentL = currentL + position
	
	if (obj.track2 == 0) then
		if (not (ox == math.floor(ox))) then
			obj.effect("領域拡張", "右", 1, "左", 1, "塗りつぶし", 1)
		end
	else
		if (not (oy == math.floor(oy))) then
			obj.effect("領域拡張", "上", 1, "下", 1, "塗りつぶし", 1)
		end
	end
	
	obj.draw(ox, oy)

obj.setoption("drawtarget", "framebuffer")
obj.load("tempbuffer")

obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz = oox,ooy,ooz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz

@[Effect] FlatShadow
--track0:Length,0,9999,50,1
--track1:Angle,-720,720,30,0.1
--dialog:Color/col,color=0xffffff;CenterTo/chk,center=0;ReduceProc,reduce=0;

if (rikky_module == nil) then require("rikky_module") end

local ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz = obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz

local originalcolor = (color == nil)
local radang = math.rad(obj.track1)
local sin,cos = math.sin(radang),math.cos(radang)
local addw = cos * obj.track0
local addh = sin * obj.track0
local reducemode = reduce
reduce = (reduce >= 1)

if (center == 0) then
	addw = addw * 2
	addh = addh * 2
end

if (reducemode == 2) then
obj.setoption("drawtarget", "tempbuffer", obj.w + math.abs(cos), obj.h + math.abs(sin))
else
obj.setoption("drawtarget", "tempbuffer", obj.w + math.abs(addw), obj.h + math.abs(addh))
end

rikky_module.image("w", "na_effect_fs_original")

if (not (originalcolor)) then
	obj.effect("単色化", "color", color, "輝度を保持する", 0)
end

if (reduce) then rikky_module.image("w", "na_effect_fs") end
local w,h = obj.w, obj.h

if (reduce) then
	local clip = (reducemode == 2)
	if (clip) then
		obj.setoption("antialias", 0)
		obj.draw(cos * 4, sin * 4)
		obj.setoption("blend", "alpha_sub")
		obj.draw()
		obj.setoption("blend", 0)
		obj.load("tempbuffer")
		w,h = obj.w, obj.h
		rikky_module.image("w", "na_effect_fs")
		obj.setoption("drawtarget", "tempbuffer", obj.w + math.abs(addw), obj.h + math.abs(addh))
		rikky_module.image("r", "na_effect_fs")
	end
	local i = 0
	local j = 0
	local lastnum = 0
	
	local iw,ih = w,h
	
	print("=================")
	
	while (i <= obj.track0) do
		i = math.pow(2, j) + lastnum
		
		local x = 0
		local y = 0
		
		if (j > 1) then
			obj.load("tempbuffer")
			iw = obj.w
			ih = obj.h
			rikky_module.image("w", "na_effect_fs2")
			rikky_module.image("r", "na_effect_fs2")
		end
		if (i > obj.track0) then
			lastnum = math.pow(2, j-1) + lastnum
			j = 0
			i = lastnum + 1
			rikky_module.image("r", "na_effect_fs")
			print("> " .. lastnum)
		end
		local pos = i / 2
		if (center == 1) then
			pos = i - (obj.track0 / 2)
		end
		obj.draw((cos * pos) + x, (sin * pos) + y)
		
		j = j + 1
		
		print(i)
	end
else
	for i=0,obj.track0 do
		local pos = i
		if (center == 1) then
			pos = i - (obj.track0 / 2)
		end
		obj.draw(cos * pos, sin * pos)
	end
end

rikky_module.image("r", "na_effect_fs_original")
if (center == 1) then obj.draw(cos * (-obj.track0 / 2), sin * (-obj.track0 / 2)) else obj.draw(0, 0) end

obj.setoption("drawtarget", "framebuffer")
obj.load("tempbuffer")
--obj.cx = 0
--obj.cy = 0

obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz = ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz

@[Effect] FlatShadow2
--track0:Length,0,9999,50,1
--track1:Angle,-720,720,30,0.1
--dialog:Color/col,color=0xffffff;CenterTo/chk,center=0;

if (rikky_module == nil) then require("rikky_module") end

rikky_module.image("w", "na_effect_fs_original")

local ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz = obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz

local radang = math.rad(obj.track1 + 90)
local sin,cos = math.sin(radang),math.cos(radang)

obj.effect("方向ブラー", "範囲", obj.track0, "角度", obj.track1)

local pfunction = function(objr, objg, objb, obja, argr, argg, argb, arga, x, y)
	local r, g, b, a = objr, objg, objb, obja
	if (a > 0) then
		a = 255
	else
		a = 0
	end
	if (not (color == nil)) then
		r, g, b = RGB(color)
	end
	return r, g, b, a
end

rikky_module.pixelfunction(pfunction)

obj.setoption("drawtarget", "tempbuffer", obj.w, obj.h)
obj.draw()

rikky_module.image("r", "na_effect_fs_original")
obj.draw(-cos * obj.track0, -sin * obj.track0)

obj.setoption("drawtarget", "framebuffer")
obj.load("tempbuffer")

if (center == 1) then
cx = -cos * obj.track0
cy = -sin * obj.track0
end

obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz = ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz

@[Effect] Z-Shadow
--track0:Length,0,9999,50,1
--track1:X,-9999,9999,0,0.1
--track2:Y,-9999,9999,0,0.1
--dialog:Color/col,color=0xffffff;

if (obj.track0 == 0) then
	return
end

if (rikky_module == nil) then require("rikky_module") end

local ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz = obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz

local originalcolor = (color == nil)


local distperX = obj.track1 / obj.track0
local distperY = obj.track2 / obj.track0
local addw = math.max(0, obj.track1 - obj.w)
local addh = math.max(0, obj.track2 - obj.h)

obj.setoption("drawtarget", "tempbuffer", obj.w + math.abs(addw), obj.h + math.abs(addh))

rikky_module.image("w", "na_effect_zs")

if (not (originalcolor)) then
	obj.effect("単色化", "color", color, "輝度を保持する", 0)
end
for i=0,obj.track0 do
	local pos = i
	obj.draw(distperX * pos, distperY * pos, i)
end

rikky_module.image("r", "na_effect_zs")
obj.draw(0, 0)

obj.setoption("drawtarget", "framebuffer")
obj.load("tempbuffer")
--obj.cx = 0
--obj.cy = 0

obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz = ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz

@[Effect] Z-Shadow2
--track0:Length,0,200,50,1
--track1:X,-9999,9999,0,0.1
--track2:Y,-9999,9999,0,0.1
--dialog:Color/col,color=0xffffff;

if (rikky_module == nil) then require("rikky_module") end

rikky_module.image("w", "na_effect_zs_original")

local ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz,w,h = obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz,obj.w,obj.h

obj.effect("放射ブラー", "範囲", obj.track0, "X", obj.track1, "Y", obj.track2)

local pfunction = function(objr, objg, objb, obja, argr, argg, argb, arga, x, y)
	local r, g, b, a = objr, objg, objb, obja
	if (a > 0) then
		a = 255
	else
		a = 0
	end
	if (not (color == nil)) then
		r, g, b = RGB(color)
	end
	return r, g, b, a
end

rikky_module.pixelfunction(pfunction)

obj.setoption("drawtarget", "tempbuffer", obj.w, obj.h)
obj.draw()

rikky_module.image("r", "na_effect_zs_original")
obj.draw(0, 0, obj.track0 * -10.2)

obj.setoption("drawtarget", "framebuffer")
obj.load("tempbuffer")

obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz = ox,oy,oz + (obj.track0 * 10.2),rx,ry,rz,zoom,alpha,aspect,cx,cy,cz

@[Effect] 傾斜変形
--track0:X,-720,720,0,0.1
--track1:Y,-720,720,0,0.1
--dialog:InScreen/chk,insc=1;

if (((obj.track0-90)%180 == 0) or ((obj.track1-90)%180 == 0)) then
	obj.alpha = 0
	return
end

if (rikky_module == nil) then require("rikky_module") end

local ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz = obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz

rikky_module.image("w", "na_effect_keisya")
local h,w = obj.h,obj.w
local radX = math.rad(obj.track0)
local radY = math.rad(obj.track1)
local tanX = math.tan(radX)
local tanY = math.tan(radY)

local imgdata = {}

local kaisiX_max = math.ceil(h * tanX)

local sizeW = obj.w + math.abs(tanX * obj.h)

obj.setoption("drawtarget", "tempbuffer", sizeW, obj.h)

local pfunctionX = function(objr, objg, objb, obja, argr, argg, argb, arga, x, y)
	local r, g, b, a = objr, objg, objb, obja
	local kaisiX = math.ceil(y * tanX)
	if (kaisiX > 0) then
		x = x - kaisiX
	else
		x = x - (kaisiX - kaisiX_max)
	end
	if (imgdata[x] == nil) then
		return 0, 0, 0, 0
	end
	return imgdata[x][y].r, imgdata[x][y].g, imgdata[x][y].b, imgdata[x][y].a
end

local pfunction_b = function(r, g, b, a, ar, ag, ab, aa, x, y)
	if (imgdata[x] == nil) then
		imgdata[x] = {}
	end
	imgdata[x][y] = {r = r, g = g, b = b, a = a}
	return r,g,b,a
end

for k,v in pairs(imgdata) do
	--print(v)
end

rikky_module.pixelfunction(pfunction_b)

if (not (obj.track0%180 == 0)) then
	obj.load("tempbuffer")
	rikky_module.pixelfunction(pfunctionX)
end


local sizeH = obj.h + math.abs(tanY * obj.w)
local kaisiY_max = math.ceil(w * tanY)
obj.setoption("drawtarget", "tempbuffer", sizeW, sizeH)
imgdata = {}
rikky_module.pixelfunction(pfunction_b)

local pfunctionY = function(objr, objg, objb, obja, argr, argg, argb, arga, x, y)
	local r, g, b, a = objr, objg, objb, obja
	local kaisiY = math.ceil(x * tanY)
	if (kaisiY > 0) then
		y = y - kaisiY
	else
		y = y - (kaisiY - kaisiY_max)
	end
	if (imgdata[x][y] == nil) then
		return 0, 0, 0, 0
	end
	return imgdata[x][y].r, imgdata[x][y].g, imgdata[x][y].b, imgdata[x][y].a
end

if (not (obj.track1%180 == 0)) then
	obj.load("tempbuffer")
	rikky_module.pixelfunction(pfunctionY)
end

obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz = ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz

@[Effect] InnerShadow
--track0:X,-100,100,5
--track1:Y,-100,100,5
--track2:Alpha,0,100,40
--track3:Blur,0,200,10,1
--check0:Shadow Only,0
--dialog:Color/col,local color=0x000000;シャドー補正/chk,local opt=1; └補正サイズ,local opt2=20;Bright/chk,bright=0;

if (rikky_module == nil) then require("rikky_module") end

rikky_module.image("w", "na_effect_innershadow0")

local obj_cp = {
	ox = obj.ox,
	oy = obj.oy,
	oz = obj.oz,
	zoom = obj.zoom,
	aspect = obj.aspect,
	rx = obj.rx,
	ry = obj.ry,
	rz = obj.rz,
	alpha = obj.alpha,
	cx = obj.cx,
	cy = obj.cy,
	cz = obj.cz
};

local master_cp = {
	zoom = obj.getvalue("zoom") / 100
}

local w = obj.w / master_cp.zoom;
local h = obj.h / master_cp.zoom;

if opt == 1 then
	w = w + (opt2 or 20)
	h = h + (opt2 or 20)
end

if (obj.track2 == 0) then
	return 0
else
	obj.setoption("drawtarget", "tempbuffer", w, h)
	obj.load("figure", "四角形", color, math.max(w, h))
	obj.draw()
	obj.setoption("blend", "alpha_sub")
	rikky_module.image("r+", "na_effect_innershadow0")
	obj.draw()
	obj.setoption("blend", 0)
	
	obj.setoption("drawtarget", "framebuffer")
	
	obj.load("tempbuffer")
	rikky_module.image("w", "na_effect_innershadow1")

	obj.setoption("drawtarget", "tempbuffer")
	if (obj.check0 == false) then
		rikky_module.image("r", "na_effect_innershadow0")
		obj.draw()
	end
	rikky_module.image("r+", "na_effect_innershadow1")
	obj.effect("ぼかし", "範囲", obj.track3)
	if (bright == 1) then
		obj.effect("色調補正", "明るさ", 200)
	end
	obj.draw(obj.track0, obj.track1, 0, 1, obj.track2 / 100)
	obj.setoption("blend", "alpha_sub")
	rikky_module.image("r+", "na_effect_innershadow1")
	obj.draw()
	obj.setoption("blend", 0)
	obj.setoption("drawtarget", "framebuffer")

	obj.load("tempbuffer")
end


obj.ox = obj_cp.ox
obj.oy = obj_cp.oy
obj.oz = obj_cp.oz
obj.zoom = obj_cp.zoom
obj.aspect = obj_cp.aspect
obj.rx = obj_cp.rx
obj.ry = obj_cp.ry
obj.rz = obj_cp.rz
obj.alpha = obj_cp.alpha
obj.cx = obj_cp.cx
obj.cy = obj_cp.cy
obj.cz = obj_cp.cz

@[Effect] QuickStrech
--track0:X,0,6000,0,1
--track1:Y,0,6000,0,1
--track2:Size,0,9999,50,1
--track3:Strech,0,9999,50,0.1
--dialog:Direction[RDLU],direction=0;

if (rikky_module == nil) then require("rikky_module") end

local ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz = obj.ox, obj.oy, obj.oz, obj.rx, obj.ry, obj.rz, obj.zoom, obj.alpha, obj.aspect, obj.cx, obj.cy, obj.cz

rikky_module.image("w", "na_effect_quickstrech1")

local dir = {"上", "右", "左", "下"}
local dire = dir[1]
local dirX = 0
local dirY = -1
local w,h = obj.track2,obj.track2
local ow,oh = obj.w,obj.h
if (direction == 0) then
	dire = dir[2]
	dirX = 1
	w = 1
	dirY = 0
elseif (direction == 1) then
	dire = dir[4]
	dirX = 0
	dirY = 1
	h = 1
elseif (direction == 2) then
	dire = dir[3]
	dirX = -1
	w = 1
	dirY = 0
elseif (direction == 3) then
	dire = dir[1]
	dirX = 0
	dirY = -1
	h = 1
end

obj.copybuffer("tmp", "obj")
obj.load("tempbuffer", obj.track0 + math.min(dirX, 0), obj.track1 + math.min(dirY, 0), w, h)
obj.effect("領域拡張", dire, math.max(math.abs(dirX), math.abs(dirY)) * obj.track3, "塗りつぶし", 1)
local sw,sh = obj.w, obj.h
rikky_module.image("w", "na_effect_quickstrech2")

obj.setoption("drawtarget", "tempbuffer", ow, oh)
rikky_module.image("r+", "na_effect_quickstrech1")
obj.draw()
rikky_module.image("r+", "na_effect_quickstrech2")
obj.draw((-ow / 2) + (sw/2) + obj.track0 + (math.min(dirX, 0) * obj.track3), (-oh / 2) + (sh/2) + obj.track1 + (math.min(dirY, 0) * obj.track3))

obj.setoption("drawtarget", "framebuffer")
obj.load("tempbuffer")

obj.ox, obj.oy, obj.oz, obj.rx, obj.ry, obj.rz, obj.zoom, obj.alpha, obj.aspect, obj.cx, obj.cy, obj.cz = ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz

@[Effect] HueGradient
--track0:X,-9999,9999,0,0.1
--track1:Y,-9999,9999,0,0.1
--track2:Angle,-7200,7200,0,0.1
--track3:Width,0,9999,100,0.1
--dialog:Hue1,hue1=0;Hue2,hue2=40;Sat1,sat1=100;Sat2,sat2=100;Vue1,vue1=100;Vue2,vue2=100;Alpha,alphaa=1.0;
if (rikky_module == nil) then require("rikky_module") end

local ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz,w,h = obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz,obj.w,obj.h

local function GetColorAt(rate)
if (rate <= 0) then return hue1,sat1,vue1 end
if (rate >= 1) then return hue2,sat2,vue2 end

local hue = hue1 + ((hue2 - hue1) * rate)
local sat = sat1 + ((sat2 - sat1) * rate)
local vue = vue1 + ((vue2 - vue1) * rate)

return hue,sat,vue
end

local widthh = obj.track3 / 2
local widthhh = obj.track3 / 4
local lineA, lineB = 0, 1
if not ((obj.track2 - 90)%180 == 0) then
lineA = -math.tan(math.rad(obj.track2))
else
lineB = 0
lineA = 1
end

local lineDist = math.sqrt(math.pow(lineA, 2) + math.pow(lineB, 2))

local function GetLineDistance(x, y)
local realX = (x - (w / 2) - (obj.track0))
local realY = (y - (h / 2) - (obj.track1))

local minus = 1
local addi = 0

if ((obj.track2+90)%360 >= 180) then minus = -1 end
if ((obj.track2 - 90)%180 == 0) then addi = obj.track1 - widthh end

return (((lineA * realX) + (lineB * realY) - obj.track1 + widthh + addi) / lineDist) * minus
end

local pfunction_b = function(r, g, b, a, ar, ag, ab, aa, x, y)
	--local rate = ((x - (w/2 - widthh)  - obj.track0) / obj.track3)
	--if not ((obj.track2 - 90)%180 == 0) then rate = ((y - (h/2) - widthh - obj.track1 - GetWidthh(x)) / obj.track3) end
	local rate = (GetLineDistance(x, y - widthhh) / obj.track3)
	local hue, sat, vue = GetColorAt(rate)
	r,g,b = RGB(HSV(hue, sat, vue))
	return r,g,b,a
end

rikky_module.pixelfunction(pfunction_b)

obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz = ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz

@[Effect] Strech
--track0:Range,1,9999,1,1
--track1:DeltaX,-9999,9999,0,0.1
--track2:DeltaY,-9999,9999,0,0.1
--dialog:deltaPosition(LT|RT|RB|LB),deltapos={0, 0, 0, 0, 0, 0, 0, 0};CenterTo/chk,center=1;

if (rikky_module == nil) then require("rikky_module") end
rikky_module.image("w", "na_effect_strech_1")

obj.setoption("drawtarget", "tempbuffer", obj.w, obj.h)
obj.setoption("antialias", 0)

local ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz,w,h = obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz,obj.w,obj.h

local positionlist = {0, obj.h, 0, obj.w, obj.h, 0, obj.w, 0, 0, 0, 0, 0}

positionlist[1] = deltapos[1] * obj.w
positionlist[2] = (1 - deltapos[2]) * obj.h

positionlist[4] = (1 - deltapos[3]) * obj.w
positionlist[5] = (1 - deltapos[4]) * obj.h

positionlist[7] = (1 - deltapos[5]) * obj.w
positionlist[8] = deltapos[6] * obj.h

positionlist[10] = deltapos[7] * obj.w
positionlist[11] = deltapos[8] * obj.h

--local uvlist = {}

for i=1,4 do
	local index = i * 3
	table.insert(positionlist, positionlist[index-2])
	table.insert(positionlist, obj.h - positionlist[index-1])
	positionlist[index-2] = positionlist[index-2] - (obj.w / 2)
	positionlist[index-1] = (obj.h / 2) - positionlist[index-1]
end

obj.drawpoly(unpack(positionlist))

obj.load("tempbuffer")
rikky_module.image("w", "na_effect_strech_2")

rikky_module.image("r", "na_effect_strech_1")
obj.draw()
rikky_module.image("r", "na_effect_strech_2")
obj.effect("縁取り", "サイズ", obj.track0, "ぼかし", 0)
obj.setoption("blend", "alpha_sub")
obj.draw()
obj.setoption("blend", 0)

obj.load("tempbuffer")
rikky_module.image("w", "na_effect_strech_3")

obj.setoption("drawtarget", "tempbuffer", w, h)

rikky_module.image("r", "na_effect_strech_1")
obj.draw()
rikky_module.image("r", "na_effect_strech_2")
obj.setoption("blend", "alpha_sub")
obj.draw()
rikky_module.image("r", "na_effect_strech_3")
obj.draw()
obj.setoption("blend", 0)

obj.load("tempbuffer")
rikky_module.image("w", "na_effect_strech_4")

local cw,ch = w + math.abs(obj.track1), h + math.abs(obj.track2)
local aw,ah = w + obj.track1, h + obj.track2

obj.setoption("drawtarget", "tempbuffer", cw, ch)

rikky_module.image("r", "na_effect_strech_1")
local wd = obj.track0 --/ 2

for i=1,4 do
	local index = i * 3
	positionlist[index-2] = positionlist[index-2] + (w / 2)
	positionlist[index-1] = (h / 2) - positionlist[index-1]
end

obj.drawpoly(
aw/2 + positionlist[1] - w-wd, ah/2 - positionlist[2] -wd, 0,
aw/2 + positionlist[4] - w-wd, ah/2 - positionlist[5] -wd, 0,
-aw/2 + positionlist[4], -ah/2 - positionlist[5] + h, 0,
-aw/2 + positionlist[1], -ah/2 - positionlist[2] + h, 0,
positionlist[13]-wd, positionlist[14]-wd, positionlist[15]-wd, positionlist[16]-wd, positionlist[15], positionlist[16], positionlist[13], positionlist[14])

obj.drawpoly(
aw/2 + positionlist[4] - w-wd, ah/2 - positionlist[5] -wd, 0,
aw/2 + positionlist[7] - w-wd, ah/2 - positionlist[8] -wd, 0,
-aw/2 + positionlist[7], -ah/2 - positionlist[8] + h, 0,
-aw/2 + positionlist[4], -ah/2 - positionlist[5] + h, 0,
positionlist[15]-wd, positionlist[16]-wd, positionlist[17]-wd, positionlist[18]-wd, positionlist[17], positionlist[18], positionlist[15], positionlist[16])

obj.drawpoly(
aw/2 + positionlist[7] -w-wd, ah/2 - positionlist[8] -wd, 0,
aw/2 + positionlist[10] -w-wd, ah/2 - positionlist[11] -wd, 0,
-aw/2 + positionlist[10], -ah/2 - positionlist[11] + h, 0,
-aw/2 + positionlist[7], -ah/2 - positionlist[8] + h, 0,
positionlist[17]-wd, positionlist[18]-wd, positionlist[19]-wd, positionlist[20]-wd, positionlist[19], positionlist[20], positionlist[17], positionlist[18])

obj.drawpoly(
aw/2 + positionlist[10] -w-wd, ah/2 - positionlist[11] -wd, 0,
aw/2 + positionlist[1] -w-wd, ah/2 - positionlist[2] -wd, 0,
-aw/2 + positionlist[1], -ah/2 - positionlist[2] + h, 0,
-aw/2 + positionlist[10], -ah/2 - positionlist[11] + h, 0,
positionlist[19]-wd, positionlist[20]-wd, positionlist[13]-wd, positionlist[14]-wd, positionlist[13], positionlist[14], positionlist[19], positionlist[20])

rikky_module.image("r", "na_effect_strech_2")
obj.draw(-obj.track1/2, -obj.track2/2)
rikky_module.image("r", "na_effect_strech_3")
obj.draw(obj.track1/2, obj.track2/2)

obj.setoption("drawtarget", "framebuffer")
obj.load("tempbuffer")

if (center == 1) then
cx = cx - (obj.track1 / 2)
cy = cy - (obj.track2 / 2)
end

obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz = ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz

@[Effect] AlphaContour
--track0:Spacing,0,255,20,0.1
--track1:Shift,0,255,0,0.1
--dialog:Color/col,color=0xffffff;

local ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz = obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz

if (rikky_module == nil) then require("rikky_module") end

local imgdata = {}

local pfunction_b = function(r, g, b, a, ar, ag, ab, aa, x, y)
	if (imgdata[x] == nil) then
		imgdata[x] = {}
	end
	imgdata[x][y] = {r = r, g = g, b = b, a = a}
	return r,g,b,a
end
time1 = os.clock()

rikky_module.pixelfunction(pfunction_b)

local r_r,r_g,r_b = RGB(color)

local pfunction_a = function(r, g, b, a, ar, ag, ab, aa, x, y)
	local r_h,r_v = 0,0
	local alp = (a - obj.track1) / obj.track0
	local x_p = imgdata[x-1]
	if (x_p == nil) then
		r_h = 0
	else
		if (math.floor(alp) == alp) then
			r_h = 1
		else
			local a_1 = x_p[y].a
			local a_2 = a
			if (not (math.floor((math.min(a_1, a_2) - obj.track1) / obj.track0) == math.floor((math.max(a_1, a_2) - obj.track1) / obj.track0))) then
				r_h = 1
			end
		end
	end
	if (r_h == 0) then
		local y_p = imgdata[x][y-1]
		if (y_p == nil) then
			r_v = 0
		else
			if (math.floor(alp) == alp) then
				r_v = 1
			else
				local a_1 = y_p.a
				local a_2 = a
				if (not (math.floor((math.min(a_1, a_2) - obj.track1) / obj.track0) == math.floor((math.max(a_1, a_2) - obj.track1) / obj.track0))) then
					r_v = 1
				end
			end
		end
	end
	
	return r_r,r_g,r_b,math.max(r_h,r_v) * 255
end

--print(os.clock() - time1)

rikky_module.pixelfunction(pfunction_a)

obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz = ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz

@[Effect] ColorTransion
--track0:Rate,0,100,0,0.1
--track1:Threshold,0,255,0,0.1
--track2:DestID,1,1000,1,1
--track3:Seed,0,9999,0,0.1
--dialog:[Image]EachObject/chk,imgeach=0;

local ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz = obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz

if (rikky_module == nil) then require("rikky_module") end

if (obj.track0 == 100) then
	local id = obj.track2 .. "_" .. (obj.index * imgeach)
	rikky_module.image("r+", "na_store_" .. id)
	return
end

rikky_module.image("w", "na_colortransion1")

local imgdata = {}
local colors2 = {}

local pfunction_b = function(r, g, b, a, ar, ag, ab, aa, x, y)
	local ci = r .. "_" .. g .. "_" .. b
	if (colors2[ci] == nil) then
		colors2[ci] = {}
	end
	table.insert(colors2[ci], {x = x, y = y, r = r, g = g, b = b, a = a})
	
	return r,g,b,a
end

rikky_module.pixelfunction(pfunction_b)

local colors1 = colors2
colors2 = {}

local id = obj.track2 .. "_" .. (obj.index * imgeach)
rikky_module.image("r+", "na_store_" .. id)

rikky_module.pixelfunction(pfunction_b)

local nco = {}

for k,v1 in pairs(colors1) do
	local v2 = colors2[k]
	if (v2 == nil) then
		for _,v in pairs(v1) do
			v.remove = true
			
			if (nco[v.x] == nil) then
				nco[v.x] = {}
			end
			if (nco[v.x][v.y] == nil) then
				nco[v.x][v.y] = {}
			end
			table.insert(nco[v.x][v.y], v)
		end
	else
		local i = 1
		for _,v in pairs(v1) do
			local index = obj.rand(1, #v2, obj.track3, obj.index)
			local v_dest = v2[index]
			
			if (v_dest == nil) then
				v.remove = true
				break
			end
			
			v.dx = v_dest.x
			v.dy = v_dest.y
			v.dr = v_dest.r
			v.dg = v_dest.g
			v.db = v_dest.b
			v.da = v_dest.a
			
			table.remove(v2, index)
			i = i + 1
			
			local dx = math.floor(((v.dx - v.x) * (obj.track0 / 100)) + v.x)
			local dy = math.floor(((v.dy - v.y) * (obj.track0 / 100)) + v.y)
			
			if (nco[dx] == nil) then
				nco[dx] = {}
			end
			if (nco[dx][dy] == nil) then
				nco[dx][dy] = {}
			end
			table.insert(nco[dx][dy], v)
		end
	end
	
	
	
end

rikky_module.image("r+", "na_colortransion1")

local pfunction_a = function(r, g, b, a, ar, ag, ab, aa, x, y)
	local vs = nco[x][y]
	local a_r,a_g,a_b,a_a = 0,0,0,0
	
	if (vs == nil) then
		return r,g,b,a
	end
	
	for k,v in pairs(vs) do
		if (v.remove) then
			a_r = a_r + (r * (obj.track0 / 100))
			a_g = a_g + (g * (obj.track0 / 100))
			a_b = a_b + (b * (obj.track0 / 100))
			a_a = a_a + (a * (obj.track0 / 100))
		else
			a_r = a_r + v.dr
			a_g = a_g + v.dg
			a_b = a_b + v.db
			a_a = a_a + v.da
		end
	end
	
	a_r = a_r / #vs
	a_g = a_g / #vs
	a_b = a_b / #vs
	a_a = a_a / #vs
	
	return a_r,a_g,a_b,a_a
end

rikky_module.pixelfunction(pfunction_a)

obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz = ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz

@[Effect] CustomDisplacement
--track0:deltaX,-9999,9999,0,0.1
--track1:deltaY,-9999,9999,0,0.1
--track2:X,-9999,9999,0,0.1
--track3:Y,-9999,9999,0,0.1

@[Effect] 5000兆円
--track0:Hue,-720,720,0,0.1
local ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz = obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz

if (rikky_module == nil) then require("rikky_module") end

obj.effect("縁取り", "サイズ", 2, "ぼかし", 0, "color", 0xffffff)
obj.effect("グラデーション", "中心Y", -10, "幅", 2, "color", 0x880000, "color2", 0xeb0000)
obj.effect("グラデーション", "中心Y", -61, "幅", 81, "color", 0xe81a00, "no_color2", 1)
obj.effect("グラデーション", "中心Y", 30, "幅", 117, "color2", 0x000000, "no_color1", 1)
obj.effect("縁取り", "サイズ", 2, "ぼかし", 50, "color", 0xffffff)

rikky_module.image("w", "na_effect_5000chou")


obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz = ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz

@[Effect] ColorNoise
--track0:Rate,0,200,100,0.1
--track1:ChangeSpeed,0,999,0,0.1
--track2:Threshold,0,100,0,0.1
--track3:Hue,-9999,9999,0,0.1
--dialog:X Speed,chx=0;Y Speed,chy=0;Frequency X,freqx=1;Frequency Y,freqy=1;Noise Type,type=0;Seed,seed=0;

if (rikky_module == nil) then require("rikky_module") end

local ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz = obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz

obj.effect("ノイズ", "周期X", freqx, "周期Y", freqy, "seed", seed, "mode", 1, "強さ", obj.track0, "変化速度", obj.track1, "速度X", chx, "速度Y", chy, "type", type, "しきい値", obj.track2)

local pfunction_a = function(r, g, b, a, ar, ag, ab, aa, x, y)
	local brightness = (r + g + b)/3
	r,g,b = RGB(HSV(((brightness/255) * 360) + obj.track3, 100, 100))
	
	return r,g,b,a
end

rikky_module.pixelfunction(pfunction_a)

obj.ox,obj.oy,obj.oz,obj.rx,obj.ry,obj.rz,obj.zoom,obj.alpha,obj.aspect,obj.cx,obj.cy,obj.cz = ox,oy,oz,rx,ry,rz,zoom,alpha,aspect,cx,cy,cz

@[Group] Test
print(obj.index)