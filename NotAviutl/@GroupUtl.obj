@[Group] GroupControl
--track0:Layer,1,99,5,1
--check0:Opposite

local gzoom = obj.zoom * (obj.getvalue("zoom")/100)
local grz = obj.rz + obj.getvalue("rz")
local min_x,max_x,min_y,max_y = 0,0,0,0
for i=1,obj.track0 do

local layer = obj.layer + i
if (obj.check0) then
	layer = obj.layer - (obj.track0-i+1)
end
obj.load("layer", layer, true)
if (not (obj.getvalue("layer" .. layer .. ".x") == nil)) then
	local layerr = "layer" .. layer .. "."
	local x = obj.ox + obj.cx + obj.getvalue(layerr .. "x")
	local y = obj.oy + obj.cy + obj.getvalue(layerr .. "y")
	local z = obj.oz + obj.cz + obj.getvalue(layerr .. "z")
	local rx = obj.rx + obj.getvalue(layerr .. "rx")
	local ry = obj.ry + obj.getvalue(layerr .. "ry")
	local rz = obj.rz + obj.getvalue(layerr .. "rz") - (grz/2)
	local zoom = obj.zoom * (obj.getvalue(layerr .. "zoom")/100) --/ gzoom
	local alpha = obj.alpha * obj.getvalue(layerr .. "alpha")
	local aspect = obj.aspect * obj.getvalue(layerr .. "aspect")
	
	local z_x = 100
	local z_y = 100
	if (aspect > 0) then
		z_x = (1-aspect)*100
		obj.effect("リサイズ", "X", z_x, "Y", z_y)
	else
		z_y = (1+aspect)*100
		obj.effect("リサイズ", "X", z_x, "Y", z_y)
	end
	
	local maxx = x + (obj.w/2 / gzoom)
	local minx = x - (obj.w/2 / gzoom)
	local maxy = y + (obj.h/2 / gzoom)
	local miny = y - (obj.h/2 / gzoom)
	
	if (maxx > max_x) then max_x = maxx end
	if (minx < min_x) then min_x = minx end
	if (maxy > max_y) then max_y = maxy end
	if (miny < min_y) then min_y= miny end
	
	--obj.draw(x,y,z,zoom,alpha,rx,ry,rz)
end

end

local w = math.max(max_x, -min_x) * 2
local h = math.max(max_y, -min_y) * 2

obj.setoption("drawtarget","tempbuffer", w, h)
for i=1,obj.track0 do

local layer = obj.layer + i
if (obj.check0) then
	layer = obj.layer - (obj.track0-i+1)
end
obj.load("layer", layer, true)
if (not (obj.getvalue("layer" .. layer .. ".x") == nil)) then
	local layerr = "layer" .. layer .. "."
	local x = obj.ox + obj.cx + obj.getvalue(layerr .. "x")
	local y = obj.oy + obj.cy + obj.getvalue(layerr .. "y")
	local z = obj.oz + obj.cz + obj.getvalue(layerr .. "z")
	local rx = obj.rx + obj.getvalue(layerr .. "rx")
	local ry = obj.ry + obj.getvalue(layerr .. "ry")
	local rz = obj.rz + obj.getvalue(layerr .. "rz") - (grz/2)
	local zoom = obj.zoom * (obj.getvalue(layerr .. "zoom")/100) --/ gzoom
	local alpha = obj.alpha * obj.getvalue(layerr .. "alpha")
	local aspect = obj.aspect * obj.getvalue(layerr .. "aspect")
	
	local z_x = 100
	local z_y = 100
	if (aspect > 0) then
		z_x = (1-aspect)*100
		obj.effect("リサイズ", "X", z_x, "Y", z_y)
	else
		z_y = (1+aspect)*100
		obj.effect("リサイズ", "X", z_x, "Y", z_y)
	end
	
	obj.draw(x,y,z,zoom,alpha,rx,ry,rz)
end

end

obj.setoption("drawtarget","framebuffer")
obj.load("tempbuffer")

--obj.zoom = 1 / gzoom

--print(obj.w .. ", " .. obj.h)


@[Group] EachObject
--track0:Layer,1,99,5,1
--check0:Opposite

local layer = obj.layer + obj.track0
if (obj.check0) then
	layer = obj.layer - obj.track0
end

--obj.setoption("draw_state", false)
obj.load("layer", layer, true)
--obj.setoption("draw_state", false)

print(tostring(obj.w) .. " x " .. tostring(obj.h))


@[Group] InitializeGroup
--track0:ID,0,1000,0,1

if (na_group == nil) then na_group = {} end

local id = tostring(obj.track0)
local group = {}

na_group[id] = group
group.min_x = 0
group.min_y = 0
group.max_x = 0
group.max_y = 0
group.objs = {}
group.setup = false

@[Group] ShowGroup
--track0:ID,0,1000,0,1
local id = tostring(obj.track0)
local group = na_group[id]
local gzoom = obj.zoom * (obj.getvalue("zoom")/100)
local grz = obj.rz + obj.getvalue("rz")

if (group.setup) then
	rikky_module.image("r", "na_groupobj_" .. id)
	return
end

for k,v in pairs(group.objs) do
	local x,y,z,zoom,alpha,rx,ry,rz,w,h = v.x,v.y,v.z,v.zoom,v.alpha,v.rx,v.ry,v.rz,v.w,v.h
	
	local length = math.sqrt(math.pow(w / 2, 2) + math.pow(h / 2, 2))
	local baseangle = math.atan2(h/2, w/2) --math.asin((h / 2) / length)
	local baseangle_anti = (math.pi - baseangle)
	
	local p1x = math.cos(math.rad(-rz) + baseangle) * length
	local p1y = math.sin(math.rad(-rz) + baseangle) * length
	local p2x = math.cos(math.rad(-rz) - baseangle) * length
	local p2y = math.sin(math.rad(-rz) - baseangle) * length
	local p3x = math.cos(math.rad(-rz) + baseangle_anti) * length
	local p3y = math.sin(math.rad(-rz) + baseangle_anti) * length
	local p4x = math.cos(math.rad(-rz) - baseangle_anti) * length
	local p4y = math.sin(math.rad(-rz) - baseangle_anti) * length
	
	local imaxx = math.max(p1x, p2x, p3x, p4x)
	local iminx = math.min(p1x, p2x, p3x, p4x)
	local imaxy = math.max(p1y, p2y, p3y, p4y)
	local iminy = math.min(p1y, p2y, p3y, p4y)
	
	local maxx = x + (imaxx)
	local minx = x + (iminx)
	local maxy = y + (imaxy)
	local miny = y + (iminy)
	
	if (maxx > group.max_x) then group.max_x = maxx end
	if (minx < group.min_x) then group.min_x = minx end
	if (maxy > group.max_y) then group.max_y = maxy end
	if (miny < group.min_y) then group.min_y= miny end
end

local w = math.max(group.max_x, -group.min_x) * 2
local h = math.max(group.max_y, -group.min_y) * 2

obj.setoption("drawtarget","tempbuffer", w, h)

for k,v in pairs(group.objs) do
	local x,y,z,zoom,alpha,rx,ry,rz,w,h = v.x,v.y,v.z,v.zoom,v.alpha,v.rx,v.ry,v.rz,v.w,v.h
	rikky_module.image("r", "na_groupobj_" .. id .. "_" .. v.image)
	obj.draw(x,y,z,zoom,alpha,rx,ry,rz)
end

obj.setoption("drawtarget","framebuffer")
obj.load("tempbuffer")

rikky_module.image("w", "na_groupobj_" .. id)

group.setup = true

